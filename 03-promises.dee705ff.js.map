{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAGsB,SAAbC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAKeQ,SAAbC,cAAc,SAASC,iBAAiB,UAAU,SAASC,GAClEA,EAAMC,iBAeR,IAbA,IAAMC,EAAOF,EAAMG,OACbC,EAAaF,EAAKG,SAAShB,MAC3BiB,EAAYJ,EAAKG,SAASE,KAC1BC,EAAcN,EAAKG,SAASI,OAG5BC,EAAaC,SAASP,EAAWQ,OACjCL,EAAOI,SAASL,EAAUM,OAC1BH,EAASE,SAASH,EAAYI,OAGhCC,EAAeH,EAEVI,EAAI,EAAGA,EAAIL,EAAQK,IAC1B3B,EAAc2B,EAAI,EAAGD,GAC8BE,MAA3C,SAAAC,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,MACjB4B,EAAAhC,GAASiC,OAAOC,QAAQ,uBAAwCC,OAAfhC,EAAS,QAAYgC,OAAN/B,EAAM,M,IAEvEgC,OAAM,SAAAL,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,MAClB4B,EAAAhC,GAASiC,OAAOI,QAAQ,sBAAuCF,OAAfhC,EAAS,QAAYgC,OAAN/B,EAAM,M,IAEtEkC,SAAQ,WAEPnB,EAAWQ,MAAQ,GACnBN,EAAUM,MAAQ,GAClBJ,EAAYI,MAAQ,E,IAGxBC,GAAgBN,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\n\n// Функция создания промиса\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// Обработчик события submit формы\ndocument.querySelector('.form').addEventListener('submit', function(event) {\n  event.preventDefault();\n\nconst form = event.target; // доступ к элементу формы - событие submit\nconst delayInput = form.elements.delay; // доступ к элементу ввода с именем \"delay\"\nconst stepInput = form.elements.step; // доступ к элементу ввода с именем \"step\"\nconst amountInput = form.elements.amount; // доступ к элементу ввода с именем \"amount\"\n\n// Преобразование значений полей ввода в число\nconst firstDelay = parseInt(delayInput.value); \nconst step = parseInt(stepInput.value); \nconst amount = parseInt(amountInput.value); \n\n// Инициализируем переменную currentDelay значением firstDelay\nlet currentDelay = firstDelay; \n\nfor (let i = 0; i < amount; i++) {\n  createPromise(i + 1, currentDelay) // Создание промиса с текущим значением позиции и задержки\n    .then(({ position, delay }) => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    })\n    .finally(() => {\n    // очистка формы\n      delayInput.value = \"\";\n      stepInput.value = \"\";\n      amountInput.value = \"\";\n    });\n\n  currentDelay += step;\n}\n\n});\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","form","target","delayInput","elements","stepInput","step","amountInput","amount","firstDelay","parseInt","value","currentDelay","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","finally"],"version":3,"file":"03-promises.dee705ff.js.map"}